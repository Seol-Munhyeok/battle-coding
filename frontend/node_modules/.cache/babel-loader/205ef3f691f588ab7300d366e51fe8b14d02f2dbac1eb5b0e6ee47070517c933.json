{"ast":null,"code":"var _jsxFileName = \"/Users/jeong-yurim/Desktop/battle_coding/src/pages/Register/components/InputInfo.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport './InputInfo.scss';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst InputInfo = ({\n  onChange,\n  OnChangeValidation\n}) => {\n  _s();\n  const [inpuData, setInputData] = useState({\n    nickname: \"\",\n    email: \"\",\n    password: \"\",\n    passwordCheck: \"\"\n  });\n  const [isValid, setIsValid] = useState({\n    nickname: false,\n    email: true,\n    password: false,\n    passwordCheck: false\n  });\n  const inputHandler = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setInputData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    if (name === \"nickname\") {\n      setIsValid(prev => ({\n        ...prev,\n        nickname: value.length > 0\n      }));\n    }\n    if (name === \"password\") {\n      const isValidPassword = /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*]).{8,16}$/.test(value);\n      setIsValid(prev => ({\n        ...prev,\n        password: isValidPassword,\n        passwordCheck: inpuData.passwordCheck === value\n      }));\n    }\n    if (name === \"passwordCheck\") {\n      setIsValid(prev => ({\n        ...prev,\n        passwordCheck: inpuData.password === value\n      }));\n    }\n    onChange(name, value);\n  };\n  useEffect(() => {\n    OnChangeValidation(\"userInfo\", Object.values(isValid).every(Boolean));\n  }, [isValid, OnChangeValidation]);\n  reutrn(/*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ...INPUT_FIELDS[0],\n      onChange: inputHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ...INPUT_FIELDS[1],\n      onChange: inputHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ...INPUT_FIELDS[2],\n      onChange: inputHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ...INPUT_FIELDS[3],\n      onChange: inputHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true));\n};\n_s(InputInfo, \"xXpUc/fT6sYVzs3QbJ5AGSrHkfA=\");\n_c = InputInfo;\nconst INPUT_FIELDS = [{\n  id: 1,\n  name: \"nickname\",\n  placeholer: \"닉네임\",\n  type: \"text\"\n}, {\n  id: 2,\n  name: \"email\",\n  placeholer: \"이메일\",\n  type: \"text\"\n}, {\n  id: 3,\n  name: \"password\",\n  placeholer: \"비밀번호\",\n  type: \"password\"\n}, {\n  id: 4,\n  name: \"passwordCheck\",\n  placeholer: \"비밀번호 확인\",\n  type: \"password\"\n}];\nexport default InputInfo;\nvar _c;\n$RefreshReg$(_c, \"InputInfo\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","InputInfo","onChange","OnChangeValidation","_s","inpuData","setInputData","nickname","email","password","passwordCheck","isValid","setIsValid","inputHandler","event","name","value","target","prev","length","isValidPassword","test","Object","values","every","Boolean","reutrn","children","INPUT_FIELDS","fileName","_jsxFileName","lineNumber","columnNumber","_c","id","placeholer","type","$RefreshReg$"],"sources":["/Users/jeong-yurim/Desktop/battle_coding/src/pages/Register/components/InputInfo.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport './InputInfo.scss';\n\nconst InputInfo = ({ onChange, OnChangeValidation }) => {\n    const [inpuData, setInputData] = useState({\n        nickname: \"\",\n        email: \"\",\n        password: \"\",\n        passwordCheck: \"\",\n    });\n\n    const [isValid, setIsValid] = useState({\n        nickname: false,\n        email: true,\n        password: false,\n        passwordCheck: false,\n    });\n\n    const inputHandler = (event) => {\n        const { name, value } = event.target;\n\n        setInputData((prev) => ({ ...prev, [name]: value }));\n\n        if (name === \"nickname\") {\n            setIsValid((prev) => ({ ...prev, nickname: value.length > 0 }));\n        }\n        if (name === \"password\") {\n            const isValidPassword = /^(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!@#$%^&*]).{8,16}$/.test(value);\n            setIsValid((prev) => ({\n                ...prev,\n                password: isValidPassword,\n                passwordCheck: inpuData.passwordCheck === value,\n            }));\n        }\n        if (name === \"passwordCheck\") {\n            setIsValid((prev) => ({ ...prev, passwordCheck: inpuData.password === value }));\n        }\n        onChange(name, value);\n    };\n\n    useEffect(() => {\n        OnChangeValidation(\"userInfo\", Object.values(isValid).every(Boolean));\n    }, [isValid, OnChangeValidation]);\n\n    reutrn (\n        <>\n            <input {...INPUT_FIELDS[0]} onChange={inputHandler} />\n            <input {...INPUT_FIELDS[1]} onChange={inputHandler} />\n            <input {...INPUT_FIELDS[2]} onChange={inputHandler} />\n            <input {...INPUT_FIELDS[3]} onChange={inputHandler} />\n        </>\n    );\n};\n\nconst INPUT_FIELDS = [\n    { id: 1, name: \"nickname\", placeholer: \"닉네임\", type: \"text\" },\n    { id: 2, name: \"email\", placeholer: \"이메일\", type: \"text\" },\n    { id: 3, name: \"password\", placeholer: \"비밀번호\", type: \"password\" },\n    { id: 4, name: \"passwordCheck\", placeholer: \"비밀번호 확인\", type: \"password\" },\n];\n\nexport default InputInfo;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}